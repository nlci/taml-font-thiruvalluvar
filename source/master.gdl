// Glyph definitions and rules for codepage 1252 composites
#include "cp1252.gdl"

#define LG_USENG 1033

table(feature)

nuka
{
    id = "cv01";
    name.LG_USENG = string("Nukta forms");
    default = ring;
    settings
    {
        ring
        {
            value = 0;
            name.LG_USENG = string("Single ring");
        }
        dotdbl
        {
            value = 1;
            name.LG_USENG = string("Double dot");
        }
        dot
        {
            value = 2;
            name.LG_USENG = string("Single dot");
        }
        ringdbl
        {
            value = 3;
            name.LG_USENG = string("Double ring");
        }
    }
}

endtable;

table(language)

bkurm {
    languages = ("xub");
    nuka = ring;
};

jkurm {
    languages = ("xuj");
    nuka = ring;
}

irula {
    languages = ("iru");
    nuka = ringdbl;
}

chetti {
    languages = ("ctt");
    nuka = dot;
}

endtable;

table(glyph)
    cCons = (g_ka g_nga g_ca g_ja g_nya g_tta g_nna g_ta g_na g_nnna g_pa g_ma g_ya g_ra g_rra g_la g_lla g_llla g_va g_sha g_ssa g_sa g_ha)
    cReOrder = (g_ematra g_eematra g_aimatra)
    allCons = (cCons cligssa)
    split_base = (g_omatra g_oomatra g_aumatra)
    split1 = (g_ematra g_eematra g_ematra)
    split2 = (g_aamatra g_aamatra g_aulengthmark)
    cMatra = (g_aamatra g_imatra g_iimatra g_umatra g_uumatra g_ematra g_eematra g_aimatra g_omatra g_oomatra g_aumatra)

    // The next four classes are to workaround a bug in make_gdl
    // umatra
    cligu1matra = (g_ka_umatra, g_nga_umatra, g_ca_umatra, g_nya_umatra, g_tta_umatra, g_nna_umatra, g_ta_umatra, g_na_umatra,
        g_nnna_umatra, g_pa_umatra, g_ma_umatra, g_ya_umatra, g_ra_umatra, g_rra_umatra, g_la_umatra, g_lla_umatra,
        g_llla_umatra, g_va_umatra);

    cligno_u1matra = (g_ka, g_nga, g_ca, g_nya, g_tta, g_nna, g_ta, g_na,
        g_nnna, g_pa, g_ma, g_ya, g_ra, g_rra, g_la, g_lla,
        g_llla, g_va);

    // uumatra
    cligno_uumatra = (g_ka, g_nga, g_ca, g_nya, g_tta, g_nna, g_ta, g_na,
        g_nnna, g_pa, g_ma, g_ya, g_ra, g_rra, g_la, g_lla,
        g_llla, g_va);

    cliguumatra = (g_ka_uumatra, g_nga_uumatra, g_ca_uumatra, g_nya_uumatra, g_tta_uumatra, g_nna_uumatra, g_ta_uumatra, g_na_uumatra,
        g_nnna_uumatra, g_pa_uumatra, g_ma_uumatra, g_ya_uumatra, g_ra_uumatra, g_rra_uumatra, g_la_uumatra, g_lla_uumatra,
        g_llla_uumatra, g_va_uumatra);
endtable;

#define CLUS1 [cligvirama g_dotbelowcomb? g_bindu? g_nukta?]?
#define CLUS2 [allCons g_dotbelowcomb? g_bindu? g_nukta? g_virama g_zwnj?]?
#define CLUSINI CLUS1 CLUS2 CLUS1 CLUS2

table(substitution)

pass(1)
    // For debugging the string "RenderingUnknown" will be rendered as "RenderingGraphite"
    // if the app is using Graphite to render the text.
    codepoint("U") codepoint("n") codepoint("k") codepoint("n") codepoint("o") codepoint("w") codepoint("n") _ >
    codepoint("G") codepoint("r") codepoint("a") codepoint("p") codepoint("h") codepoint("i") codepoint("t") codepoint("e"):16  /
        codepoint("R") codepoint("e") codepoint("n") codepoint("d") codepoint("e") codepoint("r") codepoint("i") codepoint("n") codepoint("g")  _ _ _ _ _ _ _ _;

    // Basic ligatures before reordering
    cligno_ssa g_virama g_ssa > cligssa:(1 3 4) _ _ / ^ _ g_dotbelowcomb? _ _;
    cligno_ssa g_virama g_ssa > cligssa:(1 3 4) _ _ / ^ _ g_bindu? _ _;
    cligno_ssa g_virama g_ssa > cligssa:(1 3 4) _ _ / ^ _ g_nukta? _ _;
    g_sa g_virama g_ra g_iimatra > g_sa_virama_ra_iimatra:(1 v c m) _ _ _ / _ g_dotbelowcomb? _=v _=c g_dotbelowcomb? _=m;
    g_sa g_virama g_ra g_iimatra > g_sa_virama_ra_iimatra:(1 v c m) _ _ _ / _ g_bindu? _=v _=c g_bindu? _=m;
    g_sa g_virama g_ra g_iimatra > g_sa_virama_ra_iimatra:(1 v c m) _ _ _ / _ g_nukta? _=v _=c g_nukta? _=m;
    // Complain about cons halant vowel
    // _ > g_dottedcircle / allCons g_dotbelowcomb? g_virama _ cMatra;
    // _ > g_dottedcircle / allCons g_bindu? g_virama _ cMatra;
    // _ > g_dottedcircle / allCons g_nukta? g_virama _ cMatra;
endpass;

#define reordera(x) _ split_base > split1$a:a split2$a:a / _ x g_dotbelowcomb? g_virama? _=a;\
     _ cReOrder > @a _ / _ x g_dotbelowcomb? g_virama? _=a;\
     _ _ cReOrder g_dotbelowcomb > @a @b _ _ / _ _ x g_dotbelowcomb? g_virama? _=a _=b;
#define reorderb(x) _ split_base > split1$a:a split2$a:a / _ x g_bindu? g_virama? _=a;\
     _ cReOrder > @a _ / _ x g_bindu? g_virama? _=a;\
     _ _ cReOrder g_bindu > @a @b _ _ / _ _ x g_bindu? g_virama? _=a _=b;
#define reorderc(x) _ split_base > split1$a:a split2$a:a / _ x g_nukta? g_virama? _=a;\
     _ cReOrder > @a _ / _ x g_nukta? g_virama? _=a;\
     _ _ cReOrder g_nukta > @a @b _ _ / _ _ x g_nukta? g_virama? _=a _=b;

pass(2)
    // Reordered (including split) vowel matras
    reordera(g_ka_ssa)
    reorderb(g_ka_ssa)
    reorderc(g_ka_ssa)
    reordera(cCons)
    reorderb(cCons)
    reorderc(cCons)
    reordera(cligvirama)
    reorderb(cligvirama)
    reorderc(cligvirama)
endpass;

pass(3)
    // Reordered vowel ligatures
    g_dotbelowcomb g_dotbelowcomb > g_dotbelowcomb:(1 2) _ / ^ _ _;
    g_bindu g_bindu > g_bindu:(1 2) _ / ^ _ _;
    g_nukta g_nukta > g_nukta:(1 2) _ / ^ _ _;
    g_aimatra cligno_aimatra > _ cligaimatra:(1 2);

    cligno_aamatra g_aamatra > cligaamatra:(1 3) _ / _ g_dotbelowcomb? _;
    cligno_aamatra g_aamatra > cligaamatra:(1 3) _ / _ g_bindu? _;
    cligno_aamatra g_aamatra > cligaamatra:(1 3) _ / _ g_nukta? _;

    cligno_imatra g_imatra > cligimatra:(1 3) _ / _ g_dotbelowcomb? _;
    cligno_imatra g_imatra > cligimatra:(1 3) _ / _ g_bindu? _;
    cligno_imatra g_imatra > cligimatra:(1 3) _ / _ g_nukta? _;

    cligno_iimatra g_iimatra > cligiimatra:(1 3) _ / _ g_dotbelowcomb? _;
    cligno_iimatra g_iimatra > cligiimatra:(1 3) _ / _ g_bindu? _;
    cligno_iimatra g_iimatra > cligiimatra:(1 3) _ / _ g_nukta? _;

    cligno_u1matra g_umatra > cligu1matra:(1 3) _ / _ g_dotbelowcomb? _;
    cligno_u1matra g_umatra > cligu1matra:(1 3) _ / _ g_bindu? _;
    cligno_u1matra g_umatra > cligu1matra:(1 3) _ / _ g_nukta? _;

    cligno_uumatra g_uumatra > cliguumatra:(1 3) _ / _ g_dotbelowcomb? _;
    cligno_uumatra g_uumatra > cliguumatra:(1 3) _ / _ g_bindu? _;
    cligno_uumatra g_uumatra > cliguumatra:(1 3) _ / _ g_nukta? _;

    // cligno_virama g_virama > cligvirama:(1 3) _ / _ g_dotbelowcomb? _;
    // cligno_virama g_virama > cligvirama:(1 3) _ / _ g_bindu? _;
    // cligno_virama g_virama > cligvirama:(1 3) _ / _ g_nukta? _;
endpass;

pass(4)

if (nuka == dotdbl)
    g_nukta > g_nukta_dotdbl;
    g_bindu > g_nukta_dotdbl;
    g_dotbelowcomb > g_nukta_dotdbl;
else if (nuka == dot)
    g_nukta > g_nukta_dot;
    g_bindu > g_nukta_dot;
    g_dotbelowcomb > g_nukta_dot;
else if (nuka == ringdbl)
    g_nukta > g_nukta_ringdbl;
    g_bindu > g_nukta_ringdbl;
    g_dotbelowcomb > g_nukta_ringdbl;
endif;

endpass;

endtable;
