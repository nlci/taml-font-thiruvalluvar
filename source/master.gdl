#define LG_USENG 1033

table(feature)

nuka
{
    id = "cv01";
    name.LG_USENG = string("Double and single nuktas");
    default = ring;
    settings
    {
        ring
        {
            value = 0;
            name.LG_USENG = string("Single ring");
        }
        dotdbl
        {
            value = 1;
            name.LG_USENG = string("Double dot");
        }
        dot
        {
            value = 2;
            name.LG_USENG = string("Single dot");
        }
        ringdbl
        {
            value = 3;
            name.LG_USENG = string("Double ring");
        }
    }
}

snuk
{
    id = "cv02";
    name.LG_USENG = string("Single nukta (future)");
    default = dot;
    settings
    {
        dot
        {
            value = 0;
            name.LG_USENG = string("Single dot");
        }
        ring
        {
            value = 1;
            name.LG_USENG = string("Single ring");
        }
    }
}

endtable;

table(language)

bkurm {
    languages = ("xub");
    nuka = ring;
};

jkurm {
    languages = ("xuj");
    nuka = dotdbl;
}

irula {
    languages = ("iru");
    nuka = ringdbl;
}

chetti {
    languages = ("ctt");
    nuka = dot;
    snuk = ring;
}

endtable;

table(glyph)
    cCons = (g0b95 g0b99 g0b9a g0b9c g0b9e g0b9f g0ba3 g0ba4 g0ba8 g0ba9 g0baa g0bae g0baf g0bb0 g0bb1 g0bb2 g0bb3 g0bb4 g0bb5 g0bb6 g0bb7 g0bb8 g0bb9)
    cSplitMatras = (g0bca g0bcb g0bcc)
    cReOrder = (g0bc6 g0bc7 g0bc8)
    allCons = (cCons clig0BB7)
    split_base = (g0bca g0bcb g0bcc)
    split1 = (g0bc6 g0bc7 g0bc6)
    split2 = (g0bbe g0bbe g0bd7)
    cMatra = (g0bbe g0bbf g0bc0 g0bc1 g0bc2 g0bc6 g0bc7 g0bc8 g0bca g0bcb g0bcc)
endtable;

#define CLUS1 [clig0BCD g1133b? g1133c?]?
#define CLUS2 [allCons g1133b? g1133c? g0bcd g200c?]?
#define CLUSINI CLUS1 CLUS2 CLUS1 CLUS2

/* Substitution rules start here */
/* very good */
table(substitution)

pass(1)
    // The following is a debugging tool so you can find out whether the app is rendering with Graphite or not.
    // The string "RenderingUnknown" will be rendered as "RenderingGraphite":

    codepoint("U") codepoint("n") codepoint("k") codepoint("n") codepoint("o") codepoint("w") codepoint("n") _ >
    codepoint("G") codepoint("r") codepoint("a") codepoint("p") codepoint("h") codepoint("i") codepoint("t") codepoint("e"):16  /
        codepoint("R") codepoint("e") codepoint("n") codepoint("d") codepoint("e") codepoint("r") codepoint("i") codepoint("n") codepoint("g")  _ _ _ _ _ _ _ _;

// Basic ligatures before reordering
    cligno_0BB7 g0bcd g0bb7 > clig0BB7:(1 3 4) _ _ / ^ _ g1133b? _ _;
    cligno_0BB7 g0bcd g0bb7 > clig0BB7:(1 3 4) _ _ / ^ _ g1133c? _ _;
    g0bb8 g0bcd g0bb0 g0bc0 > g0bb8_0bcd_0bb0_0bc0:(1 v c m) _ _ _ / _ g1133b? _=v _=c g1133b? _=m;
    g0bb8 g0bcd g0bb0 g0bc0 > g0bb8_0bcd_0bb0_0bc0:(1 v c m) _ _ _ / _ g1133c? _=v _=c g1133c? _=m;
// Complain about cons halant vowel
//    _ > g25cc / allCons g1133b? g0bcd _ cMatra;
//    _ > g25cc / allCons g1133c? g0bcd _ cMatra;
endpass;

#define reorderb(x) _ split_base > split1$a:a split2$a:a / _ x g1133b? g0bcd? _=a;\
     _ cReOrder > @a _ / _ x g1133b? g0bcd? _=a;\
     _ _ cReOrder g1133b > @a @b _ _ / _ _ x g1133b? g0bcd? _=a _=b;
#define reorderc(x) _ split_base > split1$a:a split2$a:a / _ x g1133c? g0bcd? _=a;\
     _ cReOrder > @a _ / _ x g1133c? g0bcd? _=a;\
     _ _ cReOrder g1133c > @a @b _ _ / _ _ x g1133c? g0bcd? _=a _=b;

pass(2)
// Reordered (including split) vowel matras
    reorderb(g0b95_0bb7)
    reorderc(g0b95_0bb7)
    // reorderb(g0b95 g0bcd g0bb6) // might not be needed now that g0bb6 is in the fonts, and in cCons
    // reorderc(g0b95 g0bcd g0bb6) // might not be needed now that g0bb6 is in the fonts, and in cCons
    reorderb(cCons)
    reorderc(cCons)
    reorderb(clig0BCD)
    reorderc(clig0BCD)
endpass;

pass(3)
// Reordered vowel ligatures
    g1133b g1133b > g1133b:(1 2) _ / ^ _ _;
    g1133c g1133c > g1133c:(1 2) _ / ^ _ _;
    g0bc8 cligno_0BC8 > _ clig0BC8:(1 2);

    cligno_0BBE g0bbe > clig0BBE:(1 3) _ / _ g1133b? _;
    cligno_0BBE g0bbe > clig0BBE:(1 3) _ / _ g1133c? _;

    cligno_0BBF g0bbf > clig0BBF:(1 3) _ / _ g1133b? _;
    cligno_0BBF g0bbf > clig0BBF:(1 3) _ / _ g1133c? _;

    cligno_0BC0 g0bc0 > clig0BC0:(1 3) _ / _ g1133b? _;
    cligno_0BC0 g0bc0 > clig0BC0:(1 3) _ / _ g1133c? _;

    cligno_0BC1 g0bc1 > clig0BC1:(1 3) _ / _ g1133b? _;
    cligno_0BC1 g0bc1 > clig0BC1:(1 3) _ / _ g1133c? _;

    cligno_0BC2 g0bc2 > clig0BC2:(1 3) _ / _ g1133b? _;
    cligno_0BC2 g0bc2 > clig0BC2:(1 3) _ / _ g1133c? _;

//  cligno_0BCD g0bcd > clig0BCD:(1 3) _ / _ g1133b? _;
//  cligno_0BCD g0bcd > clig0BCD:(1 3) _ / _ g1133c? _;
endpass;

pass(4)

if (nuka == ring && snuk == ring)
    g1133b > g1133c;
else if (nuka == dotdbl && snuk == dot)
    g1133c > g1133c_dotdbl;
else if (nuka == dotdbl && snuk == ring)
    g1133c > g1133c_dotdbl;
    g1133b > g1133c;
else if (nuka == dot && snuk == dot)
    g1133c > g1133b;
else if (nuka == dot && snuk == ring)
    g1133c > g1133b;
    g1133b > g1133c;
else if (nuka == ringdbl && snuk == dot)
    g1133c > g1133c_ringdbl;
else if (nuka == ringdbl && snuk == ring)
    g1133c > g1133c_ringdbl;
    g1133b > g1133c;
endif;

endpass;

endtable;
/* Substitution rules end here */

/* get make_gdl to do this work
table(positioning)
pass(1)
cTakesNDia cNDia {attach.to=@1; attach.at=NS; attach.with=NM; user1=1} / _ opt2(cnTakesNDia) _{user1 == 0};
cTakesRDia cRDia {attach.to=@1; attach.at=RS; attach.with=RM};
cTakesVDia cVDia {attach.to=@1; attach.at=VS; attach.with=VM};
endpass
endtable
*/
